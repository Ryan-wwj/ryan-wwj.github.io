<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试理论基础（一）</title>
    <link href="/%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="测试理论基础（一）"><a href="#测试理论基础（一）" class="headerlink" title="测试理论基础（一）"></a>测试理论基础（一）</h1><blockquote><p>5月份中部区域赛结束，还是个测试小白，测不了一点。</p><p>这系列是综合各种技术文档和公众号总结出来的，目的就是搭建测试理论体系。</p><p>学完理论基础再去牛客刷题（专项练习-测试）。</p></blockquote><h2 id="先导"><a href="#先导" class="headerlink" title="先导"></a>先导</h2><p>测试是什么？</p><p>软件开发中难免会有Bug，测试的作用就是及时找到程序存在的Bug和缺陷。</p><ol><li><strong>测试软件是否满足的用户提出的需求</strong>。这种情况下，我们应当对<strong>需求文档中的每一个需求都要编写测试样例进行测试</strong>，观察在合法输入下我们的软件是否能给出期望的输出。</li><li>测试软件<strong>是否存在缺陷</strong>，找出可能导致软件行为异常甚至崩溃的输入序列，避免这种情况的发生。</li></ol><p>总结就是<strong>测需求、测缺陷</strong>。测需求就是选用合法输入以验证是否给出正确输出，测缺陷就是通过非法输入验证程序鲁棒性。两者都可以测出软件存在的缺陷和Bug。需要注意，即使通过了测试，程序也可能存在Bug。</p><p>软件测试分为开发测试、发布测试、用户测试。主要关注开发测试，在开发过程中发现Bug和缺陷，开发测试分为：</p><ol><li>单元测试，对程序的<strong>各个单元</strong>进行测试。程序的<strong>单元可能是函数、方法、类对象</strong>，等等；</li><li>构件测试，对多个不同的单元、构件进行集成以<strong>创建一个复合构件</strong>，专注于不同构件的接口之间的关系； </li><li>系统测试：整个系统进行测试</li></ol><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p>测试理论大概有什么？</p><ol><li>测试流程：瀑布模型，双v模型，螺旋模型等</li><li>测试手段：黑盒测试，灰盒测试，白盒测试，静态测试，动态测试</li><li>测试阶段：测试过程中对应的阶段</li><li>测试成果</li><li>测试点方法：功能、非功能（iso9126）、接口（软、硬、用户接口）</li><li>黑盒测试用例设计</li><li>白盒测试用例设计</li><li>灰盒用例设计</li><li>质量铁三角</li><li>cmm5级质量图</li><li>用例标准属性</li><li>Bug等级</li><li>iso9126</li></ol><h2 id="输入处理和输出"><a href="#输入处理和输出" class="headerlink" title="输入处理和输出"></a>输入处理和输出</h2><h3 id="更新一个观点"><a href="#更新一个观点" class="headerlink" title="更新一个观点"></a>更新一个观点</h3><p>弄清楚一个问题：测试理论和流程不是线性的，而是网状结构。</p><p>测试阶段分为：单元测试-集成测试-系统测试。这句理论和<strong>功非接不是一条线串联</strong>的，而是融合的。例如，集成测试包含功能和非功能的测试点，功能又包含单元-集成-系统测试。</p><p>乍一看很复杂，但目前只需要知道，</p><p><strong>功能 &#x3D; 多个阶段 ✖️（输入+处理+输出）</strong></p><h3 id="输入-处理-输出"><a href="#输入-处理-输出" class="headerlink" title="输入-处理-输出"></a>输入-处理-输出</h3><p>任何功能的实现的三个过程。这三个过程，都要进行测试。</p><p>以<strong>登录功能</strong>为例，可以分：</p><ol><li>输入：登录名、密码、验证码</li><li>处理：服务器、中间件等</li><li>输出：成功则页面跳转，失败则出现提示</li></ol><p>以上的测试内容还不全面，三个过程还可以细分为<strong>可见&#x2F;不可见</strong>。</p><ol><li>输入<br>无论是可见还是不可见，要通过测试确保，这些参数字段成功的生成了请求体，组成了正确的接口请求。<ol><li>可见：输入的用户名，密码，验证码，是否勾选协议，登录按钮等</li><li>不可见：登录日期、IP、安全环境检测、物理设备号、缓存等</li></ol></li><li>处理<ol><li>可见：代码、函数等，可用白盒测试</li><li>不可见：外链引用、库、第三方服务等</li></ol></li><li>输出<ol><li>可见：前文的界面反馈</li><li>不可见：接口返回参数-错误码、缓存、客户端的本地配置等</li></ol></li></ol><h2 id="非功能"><a href="#非功能" class="headerlink" title="非功能"></a>非功能</h2><p>非功能有六大特性。。。</p><h3 id="功能性测试"><a href="#功能性测试" class="headerlink" title="功能性测试"></a>功能性测试</h3><blockquote><p>思考：非功能的功能性和功能测试有什么区别？</p></blockquote><p>非功能的功能性的五个特性：</p><ol><li>适合性，侧重于用户需求的适合性，提供了需要的功能，提供的功能是用户需要的</li><li>准确性，提供给用户功能的准确度（其实还是和需求挂钩）</li><li>互操作性，软件和其他系统交互的能力，例如PC中打印机和word的接口调用</li><li>保密安全性，权限、隐私</li><li>依从性，顺应法律和用户使用习惯（各种标准）</li></ol><h3 id="可靠性测试"><a href="#可靠性测试" class="headerlink" title="可靠性测试"></a>可靠性测试</h3><ol><li>成熟性，避免软件Bug导致系统失效的能力，例如，Bug导致用户信息丢失。</li><li>容错性，避免外部接口错误扩散导致系统失效，例如，打印机中途断电不会导致word运行</li><li>易恢复性，故障后可以恢复原有功能和性能</li><li>依从性，保证可靠性的业内规则，例如安全备份</li></ol><h3 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h3><ol><li>易理解性，给用户的信息要清晰易懂，反例就是看不懂怎么用</li><li>易学性，用户可以学习应用的能力，用户手册的语言中英文、是否齐全、是否有在线人工服务</li><li>易操作性，易操作和控制上的能力，安装步骤是否简单</li><li>吸引性，吸引用户的能力、界面外观</li><li>依从性，遵循设计标准</li></ol><h3 id="效率性"><a href="#效率性" class="headerlink" title="效率性"></a>效率性</h3><p>和性能测试，压力测试，负载测试有重合的地方。或者说压力测试属于效率性的一部分。</p><ol><li>时间特性，也就是<strong>性能测试</strong>，业务请求所需要的响应时间。不单是接口压测，还要全面分层衡量，如客户端渲染的速度，缓存文件读写的速度，接口请求的速度，数据库读写的速度等等。</li><li>资源利用性，业务请求所消耗的系统资源。内存、硬盘、流量、电能</li><li>依从性，不能比同行差太多吧</li></ol><h3 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h3><ol><li>适应性，无需变动就能适应环境的能力</li><li>易安装性，尽可能少的提供选择，方便用户直接安装</li><li>共存性，在公共环境中与其它软件分享公共资源共存的软件，不冲突</li><li>易替换性，做好兼容适配，例如早期鸿蒙兼容安卓</li><li>依从性，依据规范、法律做可移植</li></ol><h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><p>与shi山的斗争。</p><ol><li>易分析性，提供辅助手段帮助开发人员定位缺陷产生的原因，判断出修改的地方</li><li>易改变性，高内聚低耦合</li><li>易测试性，日志输出，方便测试</li><li>依从性，开发代码符合规范，变量名、注释文档</li></ol><h2 id="软件缺陷"><a href="#软件缺陷" class="headerlink" title="软件缺陷"></a>软件缺陷</h2><blockquote><p>什么是Bug？怎么跟踪？怎么Bug分级？</p></blockquote><h3 id="Bug属性"><a href="#Bug属性" class="headerlink" title="Bug属性"></a>Bug属性</h3><p>提交Bug会使用一些Bug管理工具，但什么标准，以下是Bug标准属性：</p><p>需求id，用例id，bug编号，bug标题，bug描述，预期输出，实际输出，复现步骤，附件图片，备注，提交人，责任人 等</p><h3 id="Bug分级"><a href="#Bug分级" class="headerlink" title="Bug分级"></a>Bug分级</h3><p>致命——严重——一般——轻微——优化</p><ol><li>致命，引起系统服务崩溃，用户关键数据丢失，巨大资产损失，生命安全风险</li><li>严重，引起软件主要功能失效</li><li>一般，主要功能失准，次要功能失效</li><li>轻微，次要功能失准</li><li>优化，影响用户体验，文案错别字等</li></ol><h3 id="Bug生命周期"><a href="#Bug生命周期" class="headerlink" title="Bug生命周期"></a>Bug生命周期</h3><p>这个过程中有几个重要角色：</p><ol><li>测试工程师，提交Bug、验证修改后的Bug</li><li>测试经理，判断是否是Bug，确定Bug是否重复</li><li>开发经理，是否延期修复</li><li>CCB，变更控制委员会，开发拒绝修复则提交CCB（类似仲裁）</li><li>开发工程师，改bug</li></ol><h2 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h2><blockquote><p>如果面试中提到测试流程，双v模型最终阶段-验收测试，面试官一问验收测试流程是什么？</p><p>可能就懵了。</p><p>为了避免成为书呆子，就有必要知道每个概念后的含义。</p></blockquote><ol><li>验收测试项目洽谈，签好合同。（测试一般不参与的）</li><li>提交测试样品，改到满意为止</li><li>编写测试计划并通过评审（需要测试参与沟通）</li><li>简单培训，进行测试设计，编制测试方案</li><li>方案通过后，开始测试，编写测试报告</li></ol><p>这个环节着实是没太多营养。。。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础</title>
    <link href="/Linux%E5%9F%BA%E7%A1%80/"/>
    <url>/Linux%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h1><blockquote><p>Linux的历史发展可以自行了解。</p><p>UNIX系统发展可以阅读《UNIX传奇》</p></blockquote><p>逛B站，偶然翻到清华科协暑培的Linux课程，非常适合作为入门上手的资料，文档链接如下：</p><p><a href="https://docs.eesast.com/docs/tools/linux&shell">Linux &amp; Shell | EESΛST Docs (eesast.com)</a></p><blockquote><p>本篇不是将文档复述一遍，而是在此基础上的强调和补充。</p></blockquote><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ol><li>输入<code>whoami</code>，查看当前身份</li><li><code>cat /etc/passwd</code>，查看全部用户属性</li><li><code>cat /etc/group</code>，查看用户组</li><li><code>sudo usermod -aG [groupname] [username]</code>，添加指定用户到指定组</li><li><code>newgrp [groupname]</code>切换用户组</li><li>查看文件，除了<code>ls</code>，还有<code>ll</code>相当于<code>ls -al</code>；了解文件权限意思</li><li>修改权限，<code>chmod</code>，读r权重为4，写w权重为2，执行x权重为1</li><li>通过 chown 命令来修改文件的属主和属组，需要使用超级用户权限修改</li></ol><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>Linux的设计哲学是一切皆文件，其文件结构呈树状。</p><ol><li>&#x2F;boot是内核文件，包括镜像文件和连接文件</li><li>&#x2F;etc存放所有的系统需要的配置文件和子目录列表</li><li>&#x2F;lib存放共享库</li><li>**&#x2F;bin 存放常用程序和指令</li><li>**&#x2F;sbin 只有系统管理员能使用的程序和指令</li><li>外部设备，&#x2F;dev 外部设备，&#x2F;media 类win的其他设备，&#x2F;mnt临时挂载别的文件系统</li><li>临时文件，&#x2F;run、&#x2F;tmp</li><li>账户文件，常见的有root和home，&#x2F;usr是存放应用程序和文件的目录，类似Windows的program files</li></ol><p>磁盘管理，在win上可以使用文件资源管理和磁盘管理实现分区管理。在Linux上：</p><ol><li><code>df -h /home</code>，查看分区磁盘使用情况</li><li><code>du -h demo</code>，查看demo文件的存储占用情况</li><li>fdisk用于操作磁盘分区表</li><li>mkfs用于格式化指定磁盘</li><li>将某个文件系统挂载到目录下，使用mount，取消挂载使用unmount</li></ol><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><h3 id="Shell命令"><a href="#Shell命令" class="headerlink" title="Shell命令"></a>Shell命令</h3><p>前文已经涉及到Shell命令，命令中涉及的参数如果记不住可以使用man命令</p><p><code>man [command name]</code>，除此之外，还有实用的命令：</p><ol><li><code>tree demo</code>，展示demo目录的文件结构</li><li>find用于查找文件，whereis可以查找二进制文件、源代码、man手册</li><li>创建目录，<code>mkdir</code>，创建文件<code>touch</code></li><li>复制和移动文件或目录，<code>cp</code>、<code>mv</code></li></ol><p>系统管理命令：CPU、内存管理情况</p><ol><li><code>top</code>，查看内存情况</li><li><code>ps aux</code>，查看进程，aux分别是三个选项；kill可以终止进程，但无法终止系统和守护进程</li><li><code>apt</code>，包管理工具。update列出所有可升级的软件，upgrade升级所有软件包，remove删除软件包，autoremove清理不再使用的依赖库，search查找包；除了apt，还有<code>snap</code>软件管理</li><li><code>cat</code>打印文件内容；<code>grep</code>查找与给定正则表达式匹配的内容</li></ol><p>vim编辑器，了解常用的指令，也可以通过配置插件作为开发工具。</p><p>输入输出重定向，<code>&gt;</code>和<code>&gt;&gt;</code></p><ol><li>命令 &gt; 文件，将命令结果重定向输出到指定文件，会覆盖</li><li>命令 2&gt; 文件，将命令执行的错误重定向输出到指定文件，会覆盖</li><li><code>&gt;&gt;</code>，不会覆盖文件已有数据</li></ol><p>管道pipe<code>|</code>，将一个命令作为下一个命令的输入，例如<code>ls | grep demo</code>用于搜索文件名包含demo的文件，ls的输出作为grep的输入。</p><h3 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h3><p>Shell脚本是在Shell中运行的程序，用于完成一些自动化任务和。</p><ol><li><p>注释</p></li><li><p>变量，<code>a=1</code>，注意不要空格，查看变量<code>echo $a</code>；删除变量<code>unset a</code></p></li><li><p>数组，<code>array=(1 2 3)</code>，注意不需要空格和逗号分隔；<code>echo $&#123;array[@]&#125;</code>，@表示数组中所有元素</p></li><li><p>分支&amp;循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">分支</span><br>if condition1<br>then<br>command1<br>elif condition2<br>then<br>command2<br>else<br>command3<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">循环</span><br>for file in file1.txt file2.txt file3.txt<br>do<br>    cat &quot;$file&quot;<br>done<br><br>a=0<br>while [ $a -le 10 ]<br>do<br>command # 注意内部使用变量要加$符号<br>done<br></code></pre></td></tr></table></figure></li><li><p>函数，<code>function test()&#123; command; return $result &#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">function test()&#123;<br>    echo &quot;参数1： $&#123;1&#125; !&quot;;             # 通过$&#123;n&#125;来获取传入函数的第n个参数<br>    echo &quot;参数10： $&#123;10&#125; !&quot;;    # 双引号括起来的字符串中可以引用变量<br>    n=$(($&#123;1&#125;+$&#123;10&#125;));<br>    return $n;     # 如果不加return，则返回值为最后一条命令的结果<br>&#125;<br><br>test 1 2 3 4 5 6 7 8 9 10;            # 调用函数时依序传递参数<br>echo $?;                              # 可以通过变量$?来获取函数的返回值或者上一条命令的结果<br></code></pre></td></tr></table></figure></li><li><p>运行方式，<code>./demo.sh</code>和<code>bash demo.sh</code></p></li></ol><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>环境变量是存放Shell工作环境的数据，以便访问。</p><p>查看环境变量，全局<code>env</code>，HOME变量<code>echo $HOME</code></p><p>设置环境变量，分临时和永久设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">临时设置</span><br>variable=&quot;test&quot;<br>export variable# 导出环境变量<br>unset variable# 删除环境变量<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如想设置持久的环境变量，就需要修改系统启动时用于加载环境变量的文件</span><br>/etc/profile# 系统级，登录shell当中加载<br>/etc/bashrc# 系统级，可认为都会被加载<br>~/.profile# 用户级，登录shell当中加载<br>~/.bashrc# 用户级，可认为都会被加载<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改 PATH 环境变量时，一般采用追加导出的方式，即在文件的最后一行加上</span><br>export PATH=/usr/local/src/mongodb/bin:$PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">环境变量立即生效，可以使用<span class="hljs-built_in">source</span></span><br>source [file name]<br></code></pre></td></tr></table></figure><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>全称是Secure Shell，安全外壳协议。为远程登录会话提供安全协议：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh user@hostname  # 主机名可以是IP地址或者域名<br>ssh -p [port] user@hostname   # SSH默认连接到目标主机的22端口，可以通过-p指定其他端口<br></code></pre></td></tr></table></figure><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><p>当远程断开后，服务器正运行的会话终止。 tmux 是用来解绑会话与打开的终端窗口的，可以让你启动的进程在断开连接之后继续运行。</p><ol><li><code>tmux new -s &lt;session name&gt;</code>，新建tmux会话</li><li>在 tmux 窗口中，按下<code>Ctrl+b</code>，然后按<code>d</code>，d是detach的意思。返回原先Shell但tmux窗口仍在后台运行；可以用<code>tmux attach -t &lt;session name&gt;</code>接回。</li><li><code>tmux kill-session -t &lt;session name&gt;</code>，关闭会话</li></ol><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>最后附上两题的答案，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">第一题，求 100 以内的奇数和。结果打印到标准输出设备。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>sum=0<br>for i in &#123;1..100..2&#125;<br>do<br>  let sum=$((sum + i))<br>done<br>echo &quot;The sum of odd numbers from 1 to 99 is: $sum&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第二题，在家目录下新建 data 目录并向其中新建 100 个名为 test1.txt,…,test100.txt 的文件。之后查找到 data 目录下所有文件名包含“5”的文件，并向其中分别写入文件名中的数字这么多行的“abcd”。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建 data 目录</span><br>mkdir -p ~/data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">循环创建 100 个文件</span><br>for i in &#123;1..100&#125;<br>do<br>    touch ~/data/test$i.txt<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">循环查找所有文件名包含<span class="hljs-string">&quot;5&quot;</span>的文件，并写入相应数量的<span class="hljs-string">&quot;abcd&quot;</span></span><br>for file in ~/data/test[5-9]*.txt<br>do<br>    # 使用文件名中的数字作为循环次数<br>    num=$(basename &quot;$file&quot; | grep -o &#x27;[0-9]\+&#x27;)<br>    for (( j=1; j&lt;=num; j++ ))<br>    do<br>        echo &quot;abcd&quot; &gt;&gt; &quot;$file&quot;<br>    done<br>done<br><br>echo &quot;操作完成。&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>开篇</title>
    <link href="/%E5%BC%80%E7%AF%87/"/>
    <url>/%E5%BC%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><h2 id="简单的开始"><a href="#简单的开始" class="headerlink" title="简单的开始"></a>简单的开始</h2><p>​博客是写给自己看的，文笔上没太多讲究。先使用Hexo和Github搭建（免费），有更多需求后再考虑部署到云服务上。</p><p>​三年计算机专业学习，两年的RoboMaster经历，积累了不少笔记，都零零散散“堆积”在我的文件夹里。正处于应届秋招开始的档口，整理技术文档是非常有必要的。所以，技术博客的推送时间并不代表写文章的时间，主要按照主题、标题和Tag来整理成专题。</p><p>目前计划要写的方向：</p><ol><li>学习笔记记录，主要是计算机核心课程</li><li>项目开发过程记录，例如 MIT6.S081、RPC、CMU15-445、南大ICS的PA</li><li>开源项目的源码分析，例如 Transformer、PyTorch、YOLO</li><li>偶尔会整理有趣的算法题解析</li><li>RoboMaster的内容会整理到战队博客上</li><li>其他——经验、方法及感想</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
