<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux基础</title>
    <link href="/Linux%E5%9F%BA%E7%A1%80/"/>
    <url>/Linux%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h1><blockquote><p>Linux的历史发展可以自行了解。</p><p>UNIX系统发展可以阅读《UNIX传奇》</p></blockquote><p>逛B站，偶然翻到清华科协暑培的Linux课程，非常适合作为入门上手的资料，文档链接如下：</p><p><a href="https://docs.eesast.com/docs/tools/linux&shell">Linux &amp; Shell | EESΛST Docs (eesast.com)</a></p><blockquote><p>本篇不是将文档复述一遍，而是在此基础上的强调和补充。</p></blockquote><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ol><li>输入<code>whoami</code>，查看当前身份</li><li><code>cat /etc/passwd</code>，查看全部用户属性</li><li><code>cat /etc/group</code>，查看用户组</li><li><code>sudo usermod -aG [groupname] [username]</code>，添加指定用户到指定组</li><li><code>newgrp [groupname]</code>切换用户组</li><li>查看文件，除了<code>ls</code>，还有<code>ll</code>相当于<code>ls -al</code>；了解文件权限意思</li><li>修改权限，<code>chmod</code>，读r权重为4，写w权重为2，执行x权重为1</li><li>通过 chown 命令来修改文件的属主和属组，需要使用超级用户权限修改</li></ol><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>Linux的设计哲学是一切皆文件，其文件结构呈树状。</p><ol><li>&#x2F;boot是内核文件，包括镜像文件和连接文件</li><li>&#x2F;etc存放所有的系统需要的配置文件和子目录列表</li><li>&#x2F;lib存放共享库</li><li>**&#x2F;bin 存放常用程序和指令</li><li>**&#x2F;sbin 只有系统管理员能使用的程序和指令</li><li>外部设备，&#x2F;dev 外部设备，&#x2F;media 类win的其他设备，&#x2F;mnt临时挂载别的文件系统</li><li>临时文件，&#x2F;run、&#x2F;tmp</li><li>账户文件，常见的有root和home，&#x2F;usr是存放应用程序和文件的目录，类似Windows的program files</li></ol><p>磁盘管理，在win上可以使用文件资源管理和磁盘管理实现分区管理。在Linux上：</p><ol><li><code>df -h /home</code>，查看分区磁盘使用情况</li><li><code>du -h demo</code>，查看demo文件的存储占用情况</li><li>fdisk用于操作磁盘分区表</li><li>mkfs用于格式化指定磁盘</li><li>将某个文件系统挂载到目录下，使用mount，取消挂载使用unmount</li></ol><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><h3 id="Shell命令"><a href="#Shell命令" class="headerlink" title="Shell命令"></a>Shell命令</h3><p>前文已经涉及到Shell命令，命令中涉及的参数如果记不住可以使用man命令</p><p><code>man [command name]</code>，除此之外，还有实用的命令：</p><ol><li><code>tree demo</code>，展示demo目录的文件结构</li><li>find用于查找文件，whereis可以查找二进制文件、源代码、man手册</li><li>创建目录，<code>mkdir</code>，创建文件<code>touch</code></li><li>复制和移动文件或目录，<code>cp</code>、<code>mv</code></li></ol><p>系统管理命令：CPU、内存管理情况</p><ol><li><code>top</code>，查看内存情况</li><li><code>ps aux</code>，查看进程，aux分别是三个选项；kill可以终止进程，但无法终止系统和守护进程</li><li><code>apt</code>，包管理工具。update列出所有可升级的软件，upgrade升级所有软件包，remove删除软件包，autoremove清理不再使用的依赖库，search查找包；除了apt，还有<code>snap</code>软件管理</li><li><code>cat</code>打印文件内容；<code>grep</code>查找与给定正则表达式匹配的内容</li></ol><p>vim编辑器，了解常用的指令，也可以通过配置插件作为开发工具。</p><p>输入输出重定向，<code>&gt;</code>和<code>&gt;&gt;</code></p><ol><li>命令 &gt; 文件，将命令结果重定向输出到指定文件，会覆盖</li><li>命令 2&gt; 文件，将命令执行的错误重定向输出到指定文件，会覆盖</li><li><code>&gt;&gt;</code>，不会覆盖文件已有数据</li></ol><p>管道pipe<code>|</code>，将一个命令作为下一个命令的输入，例如<code>ls | grep demo</code>用于搜索文件名包含demo的文件，ls的输出作为grep的输入。</p><h3 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h3><p>Shell脚本是在Shell中运行的程序，用于完成一些自动化任务和。</p><ol><li><p>注释</p></li><li><p>变量，<code>a=1</code>，注意不要空格，查看变量<code>echo $a</code>；删除变量<code>unset a</code></p></li><li><p>数组，<code>array=(1 2 3)</code>，注意不需要空格和逗号分隔；<code>echo $&#123;array[@]&#125;</code>，@表示数组中所有元素</p></li><li><p>分支&amp;循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">分支</span><br>if condition1<br>then<br>command1<br>elif condition2<br>then<br>command2<br>else<br>command3<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">循环</span><br>for file in file1.txt file2.txt file3.txt<br>do<br>    cat &quot;$file&quot;<br>done<br><br>a=0<br>while [ $a -le 10 ]<br>do<br>command # 注意内部使用变量要加$符号<br>done<br></code></pre></td></tr></table></figure></li><li><p>函数，<code>function test()&#123; command; return $result &#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">function test()&#123;<br>    echo &quot;参数1： $&#123;1&#125; !&quot;;             # 通过$&#123;n&#125;来获取传入函数的第n个参数<br>    echo &quot;参数10： $&#123;10&#125; !&quot;;    # 双引号括起来的字符串中可以引用变量<br>    n=$(($&#123;1&#125;+$&#123;10&#125;));<br>    return $n;     # 如果不加return，则返回值为最后一条命令的结果<br>&#125;<br><br>test 1 2 3 4 5 6 7 8 9 10;            # 调用函数时依序传递参数<br>echo $?;                              # 可以通过变量$?来获取函数的返回值或者上一条命令的结果<br></code></pre></td></tr></table></figure></li><li><p>运行方式，<code>./demo.sh</code>和<code>bash demo.sh</code></p></li></ol><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>环境变量是存放Shell工作环境的数据，以便访问。</p><p>查看环境变量，全局<code>env</code>，HOME变量<code>echo $HOME</code></p><p>设置环境变量，分临时和永久设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">临时设置</span><br>variable=&quot;test&quot;<br>export variable# 导出环境变量<br>unset variable# 删除环境变量<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如想设置持久的环境变量，就需要修改系统启动时用于加载环境变量的文件</span><br>/etc/profile# 系统级，登录shell当中加载<br>/etc/bashrc# 系统级，可认为都会被加载<br>~/.profile# 用户级，登录shell当中加载<br>~/.bashrc# 用户级，可认为都会被加载<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改 PATH 环境变量时，一般采用追加导出的方式，即在文件的最后一行加上</span><br>export PATH=/usr/local/src/mongodb/bin:$PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">环境变量立即生效，可以使用<span class="hljs-built_in">source</span></span><br>source [file name]<br></code></pre></td></tr></table></figure><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>全称是Secure Shell，安全外壳协议。为远程登录会话提供安全协议：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh user@hostname  # 主机名可以是IP地址或者域名<br>ssh -p [port] user@hostname   # SSH默认连接到目标主机的22端口，可以通过-p指定其他端口<br></code></pre></td></tr></table></figure><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><p>当远程断开后，服务器正运行的会话终止。 tmux 是用来解绑会话与打开的终端窗口的，可以让你启动的进程在断开连接之后继续运行。</p><ol><li><code>tmux new -s &lt;session name&gt;</code>，新建tmux会话</li><li>在 tmux 窗口中，按下<code>Ctrl+b</code>，然后按<code>d</code>，d是detach的意思。返回原先Shell但tmux窗口仍在后台运行；可以用<code>tmux attach -t &lt;session name&gt;</code>接回。</li><li><code>tmux kill-session -t &lt;session name&gt;</code>，关闭会话</li></ol><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>最后附上两题的答案，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">第一题，求 100 以内的奇数和。结果打印到标准输出设备。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>sum=0<br>for i in &#123;1..100..2&#125;<br>do<br>  let sum=$((sum + i))<br>done<br>echo &quot;The sum of odd numbers from 1 to 99 is: $sum&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第二题，在家目录下新建 data 目录并向其中新建 100 个名为 test1.txt,…,test100.txt 的文件。之后查找到 data 目录下所有文件名包含“5”的文件，并向其中分别写入文件名中的数字这么多行的“abcd”。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建 data 目录</span><br>mkdir -p ~/data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">循环创建 100 个文件</span><br>for i in &#123;1..100&#125;<br>do<br>    touch ~/data/test$i.txt<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">循环查找所有文件名包含<span class="hljs-string">&quot;5&quot;</span>的文件，并写入相应数量的<span class="hljs-string">&quot;abcd&quot;</span></span><br>for file in ~/data/test[5-9]*.txt<br>do<br>    # 使用文件名中的数字作为循环次数<br>    num=$(basename &quot;$file&quot; | grep -o &#x27;[0-9]\+&#x27;)<br>    for (( j=1; j&lt;=num; j++ ))<br>    do<br>        echo &quot;abcd&quot; &gt;&gt; &quot;$file&quot;<br>    done<br>done<br><br>echo &quot;操作完成。&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>开篇</title>
    <link href="/%E5%BC%80%E7%AF%87/"/>
    <url>/%E5%BC%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><h2 id="简单的开始"><a href="#简单的开始" class="headerlink" title="简单的开始"></a>简单的开始</h2><p>​博客是写给自己看的，文笔上没太多讲究。先使用Hexo和Github搭建（免费），有更多需求后再考虑部署到云服务上。</p><p>​三年计算机专业学习，两年的RoboMaster经历，积累了不少笔记，都零零散散“堆积”在我的文件夹里。正处于应届秋招开始的档口，整理技术文档是非常有必要的。所以，技术博客的推送时间并不代表写文章的时间，主要按照主题、标题和Tag来整理成专题。</p><p>目前计划要写的方向：</p><ol><li>学习笔记记录，主要是计算机核心课程</li><li>项目开发过程记录，例如 MIT6.S081、RPC、CMU15-445、南大ICS的PA</li><li>开源项目的源码分析，例如 Transformer、PyTorch、YOLO</li><li>偶尔会整理有趣的算法题解析</li><li>RoboMaster的内容会整理到战队博客上</li><li>其他——经验、方法及感想</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
